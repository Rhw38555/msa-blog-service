server:
  port: 0
logging:
  level:
    root: INFO
spring:
  cloud:
    config:
      uri: http://127.0.0.1:8888
      name: blog-service
  profiles:
    active: local
  application:
    name: blog-service
  zipkin:
    base-url: http://127.0.0.1:9411
    enabled: true
  sleuth:
    sampler:
      probability: 1.0
  redis:
    host: 127.0.0.1
    port: 6379
  rabbitmq:
    host: 127.0.0.1
    port: 5672
  data:
    mongodb:
      host: 127.0.0.1
      port: 27017
      database: blog
      username: admin
      password: admin1234
      authentication-database: admin
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  kafka:
    bootstrap-servers:
      - 127.0.0.1:29092
    consumer:
      # 식별 가능한 Consumer Group Id
      group-id: testgroup
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
      # latest: 가장 최근에 생산된 메시지로 offeset reset
      # earliest: 가장 오래된 메시지로 offeset reset
      # none: offset 정보가 없으면 Exception 발생
      auto-offset-reset: earliest
      # 데이터를 받아올 때, key/value를 역직렬화
      # JSON 데이터를 받아올 것이라면 JsonDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring:
          deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
          json:
            value.default.type: com.example.blogservice.domain.entity.Post
            trusted.packages: com.example.blogservice.domain.entity

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
elasticsearch:
  host: localhost
  port: 9200